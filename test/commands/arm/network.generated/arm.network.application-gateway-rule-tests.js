/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var should = require('should');
var util = require('util');
var _ = require('underscore');

var CLITest = require('../../../framework/arm-cli-test');
var utils = require('../../../../lib/util/utils');
var tagUtils = require('../../../../lib/commands/arm/tag/tagUtils');
var testUtils = require('../../../util/util');

var networkTestUtil = new (require('../../../util/networkTestUtil'))();

var generatorUtils = require('../../../../lib/util/generatorUtils');
var profile = require('../../../../lib/util/profile');
var $ = utils.getLocaleString;

var testPrefix = 'arm-network-application-gateway-rule-tests',
  groupName = 'xplat-test-rule',
  location;
var index = 0;

var requestRoutingRules = {
  ruleType: 'Basic',
  ruleTypeNew: 'PathBasedRouting',
  name: 'requestRoutingRuleName'
};

requestRoutingRules.virtualNetworkName = 'virtualNetworkName';
requestRoutingRules.subnetName = 'subnetName';
requestRoutingRules.publicIPAddressName = 'publicIPAddressName';
requestRoutingRules.applicationGatewayName = 'applicationGatewayName';
requestRoutingRules.frontendIPConfigurationName = 'frontendIPConfigurationName';
requestRoutingRules.frontendPortName = 'frontendPortName';
requestRoutingRules.backendHttpSettingsCollectionName = 'backendHttpSettingsCollectionName';
requestRoutingRules.backendAddressPoolName = 'backendAddressPoolName';
requestRoutingRules.httpListenerName = 'httpListenerName';
requestRoutingRules.urlPathMapName = 'urlPathMapName';
requestRoutingRules.redirectConfigurationName = 'redirectConfigurationName';

var urlPathMap = {
  paths: '/test',
  pathRuleName: 'urlMapRuleName01'
};
var subnet = {
  addressPrefix: '10.0.0.0/16',
  addressPrefixNew: '10.0.0.0/24'
};
var redirectConfiguration = {};
var publicIPAddress = {
  location: 'westus'
};
var httpListener = {};
var applicationGateway = {
  backendAddresses: '10.0.0.0',
  location: 'westus'
};
var virtualNetwork = {
  location: 'westus'
};
var backendAddressPool = {
  backendAddresses: '12.13.14.15',
  backendAddressesNew: '16.17.18.19'
};
var backendHttpSettingsCollection = {
  port: '1313',
  portNew: '4242'
};
var frontendPort = {
  port: '4242',
  portNew: '8080'
};
var frontendIPConfiguration = {};

var requiredEnvironment = [{
  name: 'AZURE_VM_TEST_LOCATION',
  defaultValue: 'westus'
}];

describe('arm', function () {
  describe('network', function () {
    var suite, retry = 5;
    var hour = 60 * 60000;
    var testTimeout = 5 * hour;

    before(function (done) {
      this.timeout(testTimeout);
      suite = new CLITest(this, testPrefix, requiredEnvironment);
      suite.setupSuite(function () {
        location = requestRoutingRules.location || process.env.AZURE_VM_TEST_LOCATION;
        groupName = suite.isMocked ? groupName : suite.generateId(groupName, null);
        requestRoutingRules.location = location;
        requestRoutingRules.name = suite.isMocked ? requestRoutingRules.name : suite.generateId(requestRoutingRules.name, null);
        requestRoutingRules.group = groupName;
        if (!suite.isPlayback()) {
          networkTestUtil.createGroup(groupName, location, suite, function () {
            var cmd = 'network vnet create -g {1} -n virtualNetworkName --location {location} --json'.formatArgs(virtualNetwork, groupName);
            testUtils.executeCommand(suite, retry, cmd, function (result) {
              result.exitStatus.should.equal(0);
              var cmd = 'network vnet subnet create -g {1} -n subnetName --address-prefix {addressPrefix} --vnet-name virtualNetworkName --json'.formatArgs(subnet, groupName);
              testUtils.executeCommand(suite, retry, cmd, function (result) {
                result.exitStatus.should.equal(0);
                var cmd = 'network public-ip create -g {1} -n publicIPAddressName --location {location} --json'.formatArgs(publicIPAddress, groupName);
                testUtils.executeCommand(suite, retry, cmd, function (result) {
                  result.exitStatus.should.equal(0);
                  var cmd = 'network application-gateway create -g {1} -n applicationGatewayName --servers {backendAddresses} --location {location} --vnet-name virtualNetworkName --subnet-name subnetName --public-ip-name publicIPAddressName --json'.formatArgs(applicationGateway, groupName);
                  testUtils.executeCommand(suite, retry, cmd, function (result) {
                    result.exitStatus.should.equal(0);
                    var cmd = 'network application-gateway frontend-ip create -g {1} -n frontendIPConfigurationName --gateway-name applicationGatewayName --vnet-name virtualNetworkName --subnet-name subnetName --json'.formatArgs(frontendIPConfiguration, groupName);
                    testUtils.executeCommand(suite, retry, cmd, function (result) {
                      result.exitStatus.should.equal(0);
                      var cmd = 'network application-gateway frontend-port create -g {1} -n frontendPortName --port {port} --gateway-name applicationGatewayName --json'.formatArgs(frontendPort, groupName);
                      testUtils.executeCommand(suite, retry, cmd, function (result) {
                        result.exitStatus.should.equal(0);
                        var cmd = 'network application-gateway http-settings create -g {1} -n backendHttpSettingsCollectionName --port {port} --gateway-name applicationGatewayName --json'.formatArgs(backendHttpSettingsCollection, groupName);
                        testUtils.executeCommand(suite, retry, cmd, function (result) {
                          result.exitStatus.should.equal(0);
                          var cmd = 'network application-gateway address-pool create -g {1} -n backendAddressPoolName --servers {backendAddresses} --gateway-name applicationGatewayName --json'.formatArgs(backendAddressPool, groupName);
                          testUtils.executeCommand(suite, retry, cmd, function (result) {
                            result.exitStatus.should.equal(0);
                            var cmd = 'network application-gateway http-listener create -g {1} -n httpListenerName --gateway-name applicationGatewayName --frontend-ip-name frontendIPConfigurationName --frontend-port-name frontendPortName --json'.formatArgs(httpListener, groupName);
                            testUtils.executeCommand(suite, retry, cmd, function (result) {
                              result.exitStatus.should.equal(0);
                              var cmd = 'network application-gateway url-path-map create -g {1} -n urlPathMapName --path {paths} --rule-name {pathRuleName} --gateway-name applicationGatewayName --http-settings-name backendHttpSettingsCollectionName --address-pool-name backendAddressPoolName --json'.formatArgs(urlPathMap, groupName);
                              testUtils.executeCommand(suite, retry, cmd, function (result) {
                                result.exitStatus.should.equal(0);
                                var cmd = 'network application-gateway redirect-config create -g {1} -n redirectConfigurationName --gateway-name applicationGatewayName --json'.formatArgs(redirectConfiguration, groupName);
                                testUtils.executeCommand(suite, retry, cmd, function (result) {
                                  result.exitStatus.should.equal(0);
                                  done();
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        } else {
          var subscriptionId = profile.current.getSubscription().id;
          done();
        }
      });
    });
    after(function (done) {
      this.timeout(testTimeout);
      networkTestUtil.deleteGroup(groupName, suite, function () {
        suite.teardownSuite(done);
      });
    });
    beforeEach(function (done) {
      suite.setupTest(done);
    });
    afterEach(function (done) {
      suite.teardownTest(done);
    });

    describe('request routing rules', function () {
      this.timeout(testTimeout);
      it('create should create request routing rules', function (done) {
        var cmd = 'network application-gateway rule create -g {group} -n {name} --type {ruleType} --gateway-name {applicationGatewayName} --http-listener-name {httpListenerName} --redirect-configuration-name {redirectConfigurationName} --json'.formatArgs(requestRoutingRules);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var parentOutput = JSON.parse(result.text);
          parentOutput.name.should.equal('applicationGatewayName');
          var output = utils.findFirstCaseIgnore(parentOutput.requestRoutingRules, {name: 'requestRoutingRuleName'});
          output.name.should.equal(requestRoutingRules.name);
          output.ruleType.toLowerCase().should.equal(requestRoutingRules.ruleType.toLowerCase());
          done();
        });
      });
      it('show should display request routing rules details', function (done) {
        var cmd = 'network application-gateway rule show -g {group} -n {name} --gateway-name {applicationGatewayName} --json'.formatArgs(requestRoutingRules);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(requestRoutingRules.name);
          output.ruleType.toLowerCase().should.equal(requestRoutingRules.ruleType.toLowerCase());
          done();
        });
      });
      it('set should update request routing rules', function (done) {
        var cmd = 'network application-gateway rule set -g {group} -n {name} --type {ruleTypeNew} --gateway-name {applicationGatewayName} --http-settings-name {backendHttpSettingsCollectionName} --address-pool-name {backendAddressPoolName} --url-path-map-name {urlPathMapName} --redirect-configuration-name --json'.formatArgs(requestRoutingRules);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var parentOutput = JSON.parse(result.text);
          parentOutput.name.should.equal('applicationGatewayName');
          var output = utils.findFirstCaseIgnore(parentOutput.requestRoutingRules, {name: 'requestRoutingRuleName'});
          output.name.should.equal(requestRoutingRules.name);
          output.ruleType.toLowerCase().should.equal(requestRoutingRules.ruleTypeNew.toLowerCase());
          done();
        });
      });
      it('list should display all request routing rules in resource group', function (done) {
        var cmd = 'network application-gateway rule list -g {group} --gateway-name {applicationGatewayName} --json'.formatArgs(requestRoutingRules);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var outputs = JSON.parse(result.text);
          _.some(outputs, function (output) {
            return output.name === requestRoutingRules.name;
          }).should.be.true;
          done();
        });
      });
      it('delete should delete request routing rules', function (done) {
        var cmd = 'network application-gateway rule delete -g {group} -n {name} --quiet --gateway-name {applicationGatewayName} --json'.formatArgs(requestRoutingRules);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);

          cmd = 'network application-gateway rule show -g {group} -n {name} --gateway-name {applicationGatewayName} --json'.formatArgs(requestRoutingRules);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            var output = JSON.parse(result.text || '{}');
            output.should.be.empty;
            done();
          });
        });
      });
    });
  });
});
