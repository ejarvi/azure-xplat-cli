/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var should = require('should');
var util = require('util');
var _ = require('underscore');

var CLITest = require('../../../framework/arm-cli-test');
var utils = require('../../../../lib/util/utils');
var tagUtils = require('../../../../lib/commands/arm/tag/tagUtils');
var testUtils = require('../../../util/util');

var networkTestUtil = new (require('../../../util/networkTestUtil'))();

var generatorUtils = require('../../../../lib/util/generatorUtils');
var profile = require('../../../../lib/util/profile');
var $ = utils.getLocaleString;

var testPrefix = 'arm-network-traffic-manager-endpoint-tests-generated',
  groupName = 'xplat-test-endpoint',
  location;
var index = 0;

var endpoints = {
  endpointType: 'ExternalEndpoints',
  endpointTypeShow: 'ExternalEndpoints',
  endpointTypeNew: 'ExternalEndpoints',
  endpointTypeDelete: 'ExternalEndpoints',
  target: 'test-profile-dns.azure.com',
  endpointStatus: 'Enabled',
  endpointStatusNew: 'Disabled',
  weight: '100',
  weightNew: '101',
  priority: '200',
  priorityNew: '202',
  geoMapping: 'RE,GEO-NA',
  geoMappingNew: 'RU,GEO-AP',
  location: 'westus',
  name: 'endpointName'
};

endpoints.profileName = 'profileName';

var profile = {
  relativeName: 'test-profile-dns',
  path: '/healthcheck.html',
  name: 'profileName'
};

var requiredEnvironment = [{
  name: 'AZURE_VM_TEST_LOCATION',
  defaultValue: 'westus'
}];

describe('arm', function () {
  describe('network', function () {
    var suite, retry = 5;
    var hour = 60 * 60000;
    var testTimeout = hour;

    before(function (done) {
      this.timeout(testTimeout);
      suite = new CLITest(this, testPrefix, requiredEnvironment, true);
      suite.isRecording = false;
      suite.setupSuite(function () {
        location = endpoints.location || process.env.AZURE_VM_TEST_LOCATION;
        groupName = suite.isMocked ? groupName : suite.generateId(groupName, null);
        endpoints.location = location;
        endpoints.name = suite.isMocked ? endpoints.name : suite.generateId(endpoints.name, null);
        endpoints.group = groupName;
        if (!suite.isPlayback()) {
          networkTestUtil.createGroup(groupName, location, suite, function () {
            var cmd = 'network traffic-manager profile create -g {1} -n {name} --relative-dns-name {relativeName} --monitor-path {path} --json'.formatArgs(profile, groupName);
            testUtils.executeCommand(suite, retry, cmd, function (result) {
              result.exitStatus.should.equal(0);
              done();
            });
          });
        } else {
          done();
        }
      });
    });
    after(function (done) {
      this.timeout(testTimeout);
      networkTestUtil.deleteGroup(groupName, suite, function () {
        suite.teardownSuite(done);
      });
    });
    beforeEach(function (done) {
      suite.setupTest(done);
    });
    afterEach(function (done) {
      suite.teardownTest(done);
    });

    describe('endpoints', function () {
      this.timeout(testTimeout);
      it('create should create endpoints', function (done) {
        var cmd = 'network traffic-manager endpoint create -g {group} -n {name} --type {endpointType} --target {target} --status {endpointStatus} --weight {weight} --priority {priority} --geo-mapping {geoMapping} --location {location} --profile-name {profileName}'.formatArgs(endpoints);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('show should display endpoints details', function (done) {
        var cmd = 'network traffic-manager endpoint show -g {group} -n {name} --type {endpointTypeShow} --profile-name {profileName}'.formatArgs(endpoints);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('set should update endpoints', function (done) {
        var cmd = 'network traffic-manager endpoint set -g {group} -n {name} --type {endpointTypeNew} --status {endpointStatusNew} --weight {weightNew} --priority {priorityNew} --geo-mapping {geoMappingNew} --profile-name {profileName}'.formatArgs(endpoints);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('delete should delete endpoints', function (done) {
        var cmd = 'network traffic-manager endpoint delete -g {group} -n {name} --type {endpointTypeDelete} --profile-name {profileName} --quiet'.formatArgs(endpoints);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);

          cmd = 'network traffic-manager endpoint show -g {group} -n {name} --type {endpointTypeShow} --profile-name {profileName}'.formatArgs(endpoints);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            done();
          });
        });
      });
    });
  });
});
