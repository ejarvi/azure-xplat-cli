/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var should = require('should');
var util = require('util');
var _ = require('underscore');

var CLITest = require('../../../framework/arm-cli-test');
var utils = require('../../../../lib/util/utils');
var tagUtils = require('../../../../lib/commands/arm/tag/tagUtils');
var testUtils = require('../../../util/util');

var networkTestUtil = new (require('../../../util/networkTestUtil'))();
var preinstalledEnv = new (require('../../../util/preinstalledEnv'))();

var generatorUtils = require('../../../../lib/util/generatorUtils');
var profile = require('../../../../lib/util/profile');
var $ = utils.getLocaleString;

var testPrefix = 'arm-network-watcher-packet-capture-tests-generated',
  groupName = 'xplat-test-packet-capture',
  location;
var index = 0;

var packetCaptures = {
  target: 'vmId',
  bytesToCapturePerPacket: '123456',
  totalBytesPerSession: '1234567',
  timeLimitInSeconds: '17000',
  filePath: 'D:\\test.cap',
  filters: '[{"protocol":"TCP","localIPAddress":"10.0.0.11","localPort":"8080"},{"protocol":"UDP"}]',
  name: 'packetCaptureName'
};

packetCaptures.virtualNetworkName = 'virtualNetworkName';
packetCaptures.subnetName = 'subnetName';
packetCaptures.publicIPAddressName = 'publicIPAddressName';
packetCaptures.networkInterfaceName = 'networkInterfaceName';
packetCaptures.networkWatcherName = 'networkWatcherName';

var subnet = {
  addressPrefix: '10.0.0.0/16',
  virtualNetworkName: 'virtualNetworkName',
  name: 'subnetName'
};

var networkWatcher = {
  location: 'westcentralus',
  name: 'networkWatcherName'
};

var publicIPAddress = {
  location: 'westcentralus',
  name: 'publicIPAddressName'
};

var preinstalledEnvGetPacketCaptureEnv = {
  vmName: 'TestVMForCap',
  vmStorageAccount: 'captureteststorageacc',
  vmScriptCfgPath: 'test/data/custom-extension-capture.json',
  osType: 'Windows',
  imageUrn: 'Win2012R2Datacenter'
};

var virtualNetwork = {
  location: 'westcentralus',
  name: 'virtualNetworkName'
};

var networkInterface = {
  location: 'westcentralus',
  virtualNetworkName: 'virtualNetworkName',
  subnetName: 'subnetName',
  publicIPAddressName: 'publicIPAddressName',
  name: 'networkInterfaceName'
};

var requiredEnvironment = [{
  name: 'AZURE_VM_TEST_LOCATION',
  defaultValue: 'westcentralus'
}];

describe('arm', function () {
  describe('network', function () {
    var suite, retry = 5;
    var hour = 60 * 60000;
    var testTimeout = hour;

    before(function (done) {
      this.timeout(testTimeout);
      suite = new CLITest(this, testPrefix, requiredEnvironment, true);
      suite.isRecording = false;
      suite.setupSuite(function () {
        location = packetCaptures.location || process.env.AZURE_VM_TEST_LOCATION;
        groupName = suite.isMocked ? groupName : suite.generateId(groupName, null);
        packetCaptures.location = location;
        packetCaptures.name = suite.isMocked ? packetCaptures.name : suite.generateId(packetCaptures.name, null);
        packetCaptures.group = groupName;
        if (!suite.isPlayback()) {
          networkTestUtil.createGroup(groupName, location, suite, function () {
            var cmd = 'network vnet create -g {1} -n {name} --location {location} --json'.formatArgs(virtualNetwork, groupName);
            testUtils.executeCommand(suite, retry, cmd, function (result) {
              result.exitStatus.should.equal(0);
              var cmd = 'network vnet subnet create -g {1} -n {name} --address-prefix {addressPrefix} --vnet-name {virtualNetworkName} --json'.formatArgs(subnet, groupName);
              testUtils.executeCommand(suite, retry, cmd, function (result) {
                result.exitStatus.should.equal(0);
                var cmd = 'network public-ip create -g {1} -n {name} --location {location} --json'.formatArgs(publicIPAddress, groupName);
                testUtils.executeCommand(suite, retry, cmd, function (result) {
                  result.exitStatus.should.equal(0);
                  var cmd = 'network nic create -g {1} -n {name} --location {location} --subnet-vnet-name {virtualNetworkName} --subnet-name {subnetName} --public-ip-name {publicIPAddressName} --json'.formatArgs(networkInterface, groupName);
                  testUtils.executeCommand(suite, retry, cmd, function (result) {
                    result.exitStatus.should.equal(0);
                    preinstalledEnv.getPacketCaptureEnv(packetCaptures, preinstalledEnvGetPacketCaptureEnv, groupName, suite, function (result) {
                      result.exitStatus.should.equal(0);
                      var cmd = 'network watcher create -g {1} -n {name} --location {location} --json'.formatArgs(networkWatcher, groupName);
                      testUtils.executeCommand(suite, retry, cmd, function (result) {
                        result.exitStatus.should.equal(0);
                        done();
                      });
                    });
                  });
                });
              });
            });
          });
        } else {
          var subscriptionId = profile.current.getSubscription().id;
          preinstalledEnv.getPacketCaptureEnv(packetCaptures, preinstalledEnvGetPacketCaptureEnv, groupName, suite, subscriptionId);
          done();
        }
      });
    });
    after(function (done) {
      this.timeout(testTimeout);
      networkTestUtil.deleteGroup(groupName, suite, function () {
        suite.teardownSuite(done);
      });
    });
    beforeEach(function (done) {
      suite.setupTest(done);
    });
    afterEach(function (done) {
      suite.teardownTest(done);
    });

    describe('packet captures', function () {
      this.timeout(testTimeout);
      it('create should create packet captures', function (done) {
        var cmd = 'network watcher packet-capture create -g {group} -n {name} --target {target} --bytes-per-packet {bytesToCapturePerPacket} --bytes-per-session {totalBytesPerSession} --time-limit {timeLimitInSeconds} --local-file-path {filePath} --filters {filters} --watcher-name {networkWatcherName}'.formatArgs(packetCaptures);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('show should display packet captures details', function (done) {
        var cmd = 'network watcher packet-capture show -g {group} -n {name} --watcher-name {networkWatcherName}'.formatArgs(packetCaptures);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('list should display all packet captures in resource group', function (done) {
        var cmd = 'network watcher packet-capture list -g {group} --watcher-name {networkWatcherName}'.formatArgs(packetCaptures);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('status should perform get status operation successfully', function (done) {
        var cmd = 'network watcher packet-capture status -g {group} -n {name} --watcher-name {networkWatcherName}'.formatArgs(packetCaptures);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('stop should perform stop operation successfully', function (done) {
        var cmd = 'network watcher packet-capture stop -g {group} -n {name} --watcher-name {networkWatcherName}'.formatArgs(packetCaptures);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('delete should delete packet captures', function (done) {
        var cmd = 'network watcher packet-capture delete -g {group} -n {name} --watcher-name {networkWatcherName} --quiet'.formatArgs(packetCaptures);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);

          cmd = 'network watcher packet-capture show -g {group} -n {name} --watcher-name {networkWatcherName}'.formatArgs(packetCaptures);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            done();
          });
        });
      });
    });
  });
});
