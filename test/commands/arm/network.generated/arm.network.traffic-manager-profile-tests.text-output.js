/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var should = require('should');
var util = require('util');
var _ = require('underscore');

var CLITest = require('../../../framework/arm-cli-test');
var utils = require('../../../../lib/util/utils');
var tagUtils = require('../../../../lib/commands/arm/tag/tagUtils');
var testUtils = require('../../../util/util');

var networkTestUtil = new (require('../../../util/networkTestUtil'))();

var generatorUtils = require('../../../../lib/util/generatorUtils');
var profile = require('../../../../lib/util/profile');
var $ = utils.getLocaleString;

var testPrefix = 'arm-network-traffic-manager-profile-tests-generated',
  groupName = 'xplat-test-profile',
  location;
var index = 0;

var profiles = {
  profileStatus: 'Enabled',
  profileStatusNew: 'Disabled',
  trafficRoutingMethod: 'Performance',
  trafficRoutingMethodNew: 'Weighted',
  relativeName: 'test-profile-dns',
  ttl: '300',
  ttlNew: '400',
  protocol: 'HTTP',
  protocolNew: 'HTTPS',
  port: '80',
  portNew: '90',
  path: '/healthcheck.html',
  pathNew: '/index.aspx',
  intervalInSeconds: '30',
  intervalInSecondsNew: '10',
  timeoutInSeconds: '10',
  timeoutInSecondsNew: '5',
  toleratedNumberOfFailures: '3',
  toleratedNumberOfFailuresNew: '5',
  relativeName: 'test-profile-dns',
  name: 'profileName'
};

var profilesDefault = {
  relativeName: 'test-profile-dns',
  path: '/healthcheck.html',
  profileStatus: 'Enabled',
  trafficRoutingMethod: 'Performance',
  ttl: '300',
  protocol: 'Http',
  port: '80',
  intervalInSeconds: '30',
  timeoutInSeconds: '10',
  toleratedNumberOfFailures: '3',
  name: 'profilesDefaultName',
  group: groupName
};

var requiredEnvironment = [{
  name: 'AZURE_VM_TEST_LOCATION',
  defaultValue: 'westus'
}];

describe('arm', function () {
  describe('network', function () {
    var suite, retry = 5;
    var hour = 60 * 60000;
    var testTimeout = hour;

    before(function (done) {
      this.timeout(testTimeout);
      suite = new CLITest(this, testPrefix, requiredEnvironment, true);
      suite.isRecording = false;
      suite.setupSuite(function () {
        location = profiles.location || process.env.AZURE_VM_TEST_LOCATION;
        groupName = suite.isMocked ? groupName : suite.generateId(groupName, null);
        profiles.location = location;
        profiles.name = suite.isMocked ? profiles.name : suite.generateId(profiles.name, null);
        profiles.group = groupName;
        if (!suite.isPlayback()) {
          networkTestUtil.createGroup(groupName, location, suite, function () {
            done();
          });
        } else {
          done();
        }
      });
    });
    after(function (done) {
      this.timeout(testTimeout);
      networkTestUtil.deleteGroup(groupName, suite, function () {
        suite.teardownSuite(done);
      });
    });
    beforeEach(function (done) {
      suite.setupTest(done);
    });
    afterEach(function (done) {
      suite.teardownTest(done);
    });

    describe('profiles', function () {
      this.timeout(testTimeout);
      it('create should create profiles', function (done) {
        var cmd = 'network traffic-manager profile create -g {group} -n {name} --profile-status {profileStatus} --traffic-routing-method {trafficRoutingMethod} --relative-dns-name {relativeName} --ttl {ttl} --monitor-protocol {protocol} --monitor-port {port} --monitor-path {path} --interval-in-seconds {intervalInSeconds} --timeout-in-seconds {timeoutInSeconds} --tolerated-number-of-failures {toleratedNumberOfFailures}'.formatArgs(profiles);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('show should display profiles details', function (done) {
        var cmd = 'network traffic-manager profile show -g {group} -n {name}'.formatArgs(profiles);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('set should update profiles', function (done) {
        var cmd = 'network traffic-manager profile set -g {group} -n {name} --profile-status {profileStatusNew} --traffic-routing-method {trafficRoutingMethodNew} --ttl {ttlNew} --monitor-protocol {protocolNew} --monitor-port {portNew} --monitor-path {pathNew} --interval-in-seconds {intervalInSecondsNew} --timeout-in-seconds {timeoutInSecondsNew} --tolerated-number-of-failures {toleratedNumberOfFailuresNew}'.formatArgs(profiles);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('list should display all profiles in resource group', function (done) {
        var cmd = 'network traffic-manager profile list -g {group}'.formatArgs(profiles);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('is-dns-available should perform check traffic manager relative dns name availability operation successfully', function (done) {
        var cmd = 'network traffic-manager profile is-dns-available --relative-dns-name {relativeName}'.formatArgs(profiles);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('delete should delete profiles', function (done) {
        var cmd = 'network traffic-manager profile delete -g {group} -n {name} --quiet'.formatArgs(profiles);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);

          cmd = 'network traffic-manager profile show -g {group} -n {name}'.formatArgs(profiles);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            done();
          });
        });
      });
      it('create with defaults should create profiles with default values', function (done) {
        var cmd = 'network traffic-manager profile create -g {group} -n {name} --relative-dns-name {relativeName} --monitor-path {path}'.formatArgs(profilesDefault);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);

          cmd = 'network traffic-manager profile delete -g {group} -n {name} --quiet'.formatArgs(profilesDefault);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            done();
          });
        });
      });
    });
  });
});
