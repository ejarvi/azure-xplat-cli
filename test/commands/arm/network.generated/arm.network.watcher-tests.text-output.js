/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var should = require('should');
var util = require('util');
var _ = require('underscore');

var CLITest = require('../../../framework/arm-cli-test');
var utils = require('../../../../lib/util/utils');
var tagUtils = require('../../../../lib/commands/arm/tag/tagUtils');
var testUtils = require('../../../util/util');

var networkTestUtil = new (require('../../../util/networkTestUtil'))();
var preinstalledEnv = new (require('../../../util/preinstalledEnv'))();

var generatorUtils = require('../../../../lib/util/generatorUtils');
var profile = require('../../../../lib/util/profile');
var $ = utils.getLocaleString;

var testPrefix = 'arm-network-watcher-tests-generated',
  groupName = 'xplat-test-watcher',
  location;
var index = 0;

var networkWatchers = {
  location: 'westcentralus',
  targetResourceGroupName: 'xplat-rg-topology',
  direction: 'Inbound',
  protocol: 'TCP',
  localPort: '80',
  remotePort: '80',
  localIPAddress: '10.0.0.4',
  remoteIPAddress: '10.0.0.13',
  sourceIPAddress: '10.0.0.4',
  destinationIPAddress: '192.168.10.11',
  enabled: 'true',
  retentionPolicyEnabled: 'true',
  days: '123',
  address: 'bing.com',
  destinationPort: '80',
  name: 'networkWatcherName'
};

networkWatchers.virtualNetworkName = 'virtualNetworkName';
networkWatchers.subnetName = 'subnetName';
networkWatchers.publicIPAddressName = 'publicIPAddressName';
networkWatchers.networkSecurityGroupName = 'networkSecurityGroupName';
networkWatchers.networkInterfaceName = 'networkInterfaceName';

var preinstalledEnvGetNetworkWatcherEnv = {
  blobName: 'troubleshootblobname',
  storageName: 'troubleshootteststorage',
  vmStorageAccount: 'watcherteststorageacc',
  vmName: 'TestVMWatcher',
  osType: 'Windows',
  imageUrn: 'Win2012R2Datacenter',
  vpnGatewayName: 'troubleshootVpn',
  vnetName: 'vpnVnet',
  subnetName: 'GatewaySubnet',
  publicIpName: 'vpnIp',
  vnetAddressPrefix: '10.0.0.0/8',
  subnetAddressPrefix: '10.0.0.0/16',
  enableBgp: true,
  bgpSettingsAsn: 10,
  bgpPeeringAddress: '10.0.0.17',
  bgpPeerWeight: 20,
  vpnType: 'RouteBased',
  gatewayType: 'Vpn',
  sku: 'Standard'
};

var subnet = {
  addressPrefix: '10.0.0.0/16',
  virtualNetworkName: 'virtualNetworkName',
  name: 'subnetName'
};

var networkSecurityGroup = {
  location: 'westcentralus',
  name: 'networkSecurityGroupName'
};

var publicIPAddress = {
  location: 'westcentralus',
  name: 'publicIPAddressName'
};

var virtualNetwork = {
  location: 'westcentralus',
  name: 'virtualNetworkName'
};

var networkInterface = {
  location: 'westcentralus',
  virtualNetworkName: 'virtualNetworkName',
  subnetName: 'subnetName',
  publicIPAddressName: 'publicIPAddressName',
  networkSecurityGroupName: 'networkSecurityGroupName',
  name: 'networkInterfaceName'
};

var requiredEnvironment = [{
  name: 'AZURE_VM_TEST_LOCATION',
  defaultValue: 'westcentralus'
}];

describe('arm', function () {
  describe('network', function () {
    var suite, retry = 5;
    var hour = 60 * 60000;
    var testTimeout = 2 * hour;

    before(function (done) {
      this.timeout(testTimeout);
      suite = new CLITest(this, testPrefix, requiredEnvironment, true);
      suite.isRecording = false;
      suite.setupSuite(function () {
        location = networkWatchers.location || process.env.AZURE_VM_TEST_LOCATION;
        groupName = suite.isMocked ? groupName : suite.generateId(groupName, null);
        networkWatchers.location = location;
        networkWatchers.name = suite.isMocked ? networkWatchers.name : suite.generateId(networkWatchers.name, null);
        networkWatchers.group = groupName;
        if (!suite.isPlayback()) {
          networkTestUtil.createGroup(groupName, location, suite, function () {
            networkTestUtil.createGroup(networkWatchers.targetResourceGroupName, location, suite, function () {
              var cmd = 'network vnet create -g {1} -n {name} --location {location} --json'.formatArgs(virtualNetwork, groupName);
              testUtils.executeCommand(suite, retry, cmd, function (result) {
                result.exitStatus.should.equal(0);
                var cmd = 'network vnet subnet create -g {1} -n {name} --address-prefix {addressPrefix} --vnet-name {virtualNetworkName} --json'.formatArgs(subnet, groupName);
                testUtils.executeCommand(suite, retry, cmd, function (result) {
                  result.exitStatus.should.equal(0);
                  var cmd = 'network public-ip create -g {1} -n {name} --location {location} --json'.formatArgs(publicIPAddress, groupName);
                  testUtils.executeCommand(suite, retry, cmd, function (result) {
                    result.exitStatus.should.equal(0);
                    var cmd = 'network nsg create -g {1} -n {name} --location {location} --json'.formatArgs(networkSecurityGroup, groupName);
                    testUtils.executeCommand(suite, retry, cmd, function (result) {
                      result.exitStatus.should.equal(0);
                      var output = JSON.parse(result.text);
                      networkWatchers.networkSecurityGroupId = output.id;
                      var cmd = 'network nic create -g {1} -n {name} --location {location} --subnet-vnet-name {virtualNetworkName} --subnet-name {subnetName} --public-ip-name {publicIPAddressName} --network-security-group-name {networkSecurityGroupName} --json'.formatArgs(networkInterface, groupName);
                      testUtils.executeCommand(suite, retry, cmd, function (result) {
                        result.exitStatus.should.equal(0);
                        var output = JSON.parse(result.text);
                        networkWatchers.networkInterfaceId = output.id;
                        preinstalledEnv.getNetworkWatcherEnv(networkWatchers, preinstalledEnvGetNetworkWatcherEnv, groupName, suite, function (result) {
                          result.exitStatus.should.equal(0);
                          done();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        } else {
          var subscriptionId = profile.current.getSubscription().id;
          networkWatchers.networkSecurityGroupId = generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'networkSecurityGroups', networkWatchers.networkSecurityGroupName);
          networkWatchers.networkInterfaceId = generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'networkInterfaces', networkWatchers.networkInterfaceName);
          preinstalledEnv.getNetworkWatcherEnv(networkWatchers, preinstalledEnvGetNetworkWatcherEnv, groupName, suite, subscriptionId);
          done();
        }
      });
    });
    after(function (done) {
      this.timeout(testTimeout);
      networkTestUtil.deleteGroup(groupName, suite, function () {
        networkTestUtil.deleteGroup(networkWatchers.targetResourceGroupName, suite, function () {
          suite.teardownSuite(done);
        });
      });
    });
    beforeEach(function (done) {
      suite.setupTest(done);
    });
    afterEach(function (done) {
      suite.teardownTest(done);
    });

    describe('network watchers', function () {
      this.timeout(testTimeout);
      it('create should create network watchers', function (done) {
        var cmd = 'network watcher create -g {group} -n {name} --location {location}'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('show should display network watchers details', function (done) {
        var cmd = 'network watcher show -g {group} -n {name}'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('list should display all network watchers in resource group', function (done) {
        var cmd = 'network watcher list -g {group}'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('topology should perform get topology operation successfully', function (done) {
        var cmd = 'network watcher topology -g {group} -n {name} --topology-resource-group {targetResourceGroupName}'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('ip-flow-verify should perform verify ip flow operation successfully', function (done) {
        var cmd = 'network watcher ip-flow-verify -g {group} -n {name} --target {virtualMachineId} --direction {direction} --protocol {protocol} --local-port {localPort} --remote-port {remotePort} --local-ip-address {localIPAddress} --remote-ip-address {remoteIPAddress} --nic-id {networkInterfaceId}'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('next-hop should perform get next hop operation successfully', function (done) {
        var cmd = 'network watcher next-hop -g {group} -n {name} --target {virtualMachineId} --source-ip-address {sourceIPAddress} --destination-ip-address {destinationIPAddress} --nic-id {networkInterfaceId}'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('security-group-view should perform get vm security rules operation successfully', function (done) {
        var cmd = 'network watcher security-group-view -g {group} -n {name} --target {virtualMachineId}'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('troubleshoot should perform get troubleshooting operation successfully', function (done) {
        var cmd = 'network watcher troubleshoot -g {group} -n {name} --target {vpnGatewayId} --storage-id {storageId} --storage-path {storagePath}'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('troubleshoot-result should perform get troubleshooting result operation successfully', function (done) {
        var cmd = 'network watcher troubleshoot-result -g {group} -n {name} --target {vpnGatewayId}'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('configure-flow-log should perform set flow log configuration operation successfully', function (done) {
        var cmd = 'network watcher configure-flow-log -g {group} -n {name} --target {networkSecurityGroupId} --enable {enabled} --storage-id {storageId} --retention-enable {retentionPolicyEnabled} --retention-days {days}'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('flow-log-status should perform get flow log status operation successfully', function (done) {
        var cmd = 'network watcher flow-log-status -g {group} -n {name} --target {networkSecurityGroupId}'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('check-connectivity should perform check connectivity operation successfully', function (done) {
        var cmd = 'network watcher check-connectivity -g {group} -n {name} --source-id {virtualMachineId} --destination-address {address} --destination-port {destinationPort}'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('delete should delete network watchers', function (done) {
        var cmd = 'network watcher delete -g {group} -n {name} --quiet'.formatArgs(networkWatchers);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);

          cmd = 'network watcher show -g {group} -n {name}'.formatArgs(networkWatchers);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);

            cmd = 'network watcher list -g {group}'.formatArgs(networkWatchers);
            testUtils.executeCommand(suite, retry, cmd, function (result) {
              result.exitStatus.should.equal(0);
              done();
            });
          });
        });
      });
    });
  });
});
