/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var generatorUtils = require('../../../util/generatorUtils');
var util = require('util');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

exports.init = function (cli) {
  var network = cli.category('network')
    .description($('Commands to manage network resources'));
  var virtualNetworks = network.category('vnet')
    .description($('Commands to manage virtual networks'));
  var virtualNetworkPeerings = virtualNetworks.category('peering')
    .description($('Commands to manage virtual network peerings'));

  virtualNetworkPeerings.command('create [resource-group] [vnet-name] [name]')
    .description($('Create a virtual network peering'))
    .usage('[options] <resource-group> <vnet-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-e, --vnet-name <vnet-name>', $('the vnet name'))
    .option('-n, --name <name>', $('the name of the virtual network peering'))
    .option('-a, --allow-vnet-access [allow-vnet-access]', $('whether the VMs in the linked virtual' +
      '\n     network space would be able to access all the VMs in local Virtual network' +
      '\n     space'))
    .option('-f, --allow-forwarded-traffic [allow-forwarded-traffic]', $('whether the forwarded traffic from the' +
      '\n     VMs in the remote virtual network will be allowed/disallowed'))
    .option('-y, --allow-gateway-transit [allow-gateway-transit]', $('if gateway links can be used in remote' +
      '\n     virtual networking to link to this virtual network'))
    .option('-w, --use-remote-gateways [use-remote-gateways]', $('if remote gateways can be used on this' +
      '\n     virtual network. If the flag is set to true, and allowGatewayTransit on remote' +
      '\n     peering is also true, virtual network will use gateways of remote virtual' +
      '\n     network for transit. Only one peering can have this flag set to true. This flag' +
      '\n     cannot be set if virtual network already has a gateway'))
    .option('-m, --remote-vnet-name [remote-vnet-name]', $('sets remote virtual network. This' +
      '\n     option is mutually exclusive with --remote-vnet-id'))
    .option('-r, --remote-vnet-id [remote-vnet-id]', $('sets remote virtual network. This' +
      '\n     option is mutually exclusive with --remote-vnet-name'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, vnetName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      vnetName = cli.interaction.promptIfNotGiven($('vnet name : '), vnetName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var virtualNetworkPeering;
      var progress = cli.interaction.progress(util.format($('Looking up the virtual network peering "%s"'), name));
      try {
        virtualNetworkPeering = networkManagementClient.virtualNetworkPeerings.get(resourceGroup, vnetName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          virtualNetworkPeering = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (virtualNetworkPeering) {
        throw new Error(util.format($('virtual network peering with name "%s" already exists in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = {};
      if(options.allowVnetAccess) {
        parameters.allowVirtualNetworkAccess = utils.parseBool(options.allowVnetAccess);
      }

      if(options.allowForwardedTraffic) {
        parameters.allowForwardedTraffic = utils.parseBool(options.allowForwardedTraffic);
      }

      if(options.allowGatewayTransit) {
        parameters.allowGatewayTransit = utils.parseBool(options.allowGatewayTransit);
      }

      if(options.useRemoteGateways) {
        parameters.useRemoteGateways = utils.parseBool(options.useRemoteGateways);
      }

      if(!parameters.remoteVirtualNetwork) {
        parameters.remoteVirtualNetwork = {};
      }
      if(options.remoteVnetId) {
        if(options.remoteVnetName) {
          cli.output.warn($('--remote-vnet-name parameter will be ignored because --remote-vnet-id and --remote-vnet-name are mutually exclusive'));
        }
        parameters.remoteVirtualNetwork.id = options.remoteVnetId;
      } else if(options.remoteVnetName) {
        var idContainerremoteVirtualNetwork = networkManagementClient.virtualNetworks.get(resourceGroup, options.remoteVnetName, _);
        if (!idContainerremoteVirtualNetwork) {
          throw new Error(util.format($('A virtual network with name "%s" not found in the resource group "%s"'), options.remoteVnetName, resourceGroup));
        }
        parameters.remoteVirtualNetwork.id = idContainerremoteVirtualNetwork.id;
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Creating virtual network peering "%s"'), name));
      try {
        virtualNetworkPeering = networkManagementClient.virtualNetworkPeerings.createOrUpdate(resourceGroup, vnetName, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(virtualNetworkPeering, generatorUtils.traverse);
    });

  virtualNetworkPeerings.command('set [resource-group] [vnet-name] [name]')
    .description($('Update a virtual network peering'))
    .usage('[options] <resource-group> <vnet-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-e, --vnet-name <vnet-name>', $('the vnet name'))
    .option('-n, --name <name>', $('the name of the virtual network peering'))
    .option('-a, --allow-vnet-access [allow-vnet-access]', $('whether the VMs in the linked virtual' +
      '\n     network space would be able to access all the VMs in local Virtual network' +
      '\n     space'))
    .option('-f, --allow-forwarded-traffic [allow-forwarded-traffic]', $('whether the forwarded traffic from the' +
      '\n     VMs in the remote virtual network will be allowed/disallowed'))
    .option('-y, --allow-gateway-transit [allow-gateway-transit]', $('if gateway links can be used in remote' +
      '\n     virtual networking to link to this virtual network'))
    .option('-w, --use-remote-gateways [use-remote-gateways]', $('if remote gateways can be used on this' +
      '\n     virtual network. If the flag is set to true, and allowGatewayTransit on remote' +
      '\n     peering is also true, virtual network will use gateways of remote virtual' +
      '\n     network for transit. Only one peering can have this flag set to true. This flag' +
      '\n     cannot be set if virtual network already has a gateway'))
    .option('-m, --remote-vnet-name [remote-vnet-name]', $('sets remote virtual network. This' +
      '\n     option is mutually exclusive with --remote-vnet-id'))
    .option('-r, --remote-vnet-id [remote-vnet-id]', $('sets remote virtual network. This' +
      '\n     option is mutually exclusive with --remote-vnet-name'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, vnetName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      vnetName = cli.interaction.promptIfNotGiven($('vnet name : '), vnetName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var virtualNetworkPeering;
      var progress = cli.interaction.progress(util.format($('Looking up the virtual network peering "%s"'), name));
      try {
        virtualNetworkPeering = networkManagementClient.virtualNetworkPeerings.get(resourceGroup, vnetName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          virtualNetworkPeering = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!virtualNetworkPeering) {
        throw new Error(util.format($('virtual network peering with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = virtualNetworkPeering;
      if(options.allowVnetAccess) {
        parameters.allowVirtualNetworkAccess = utils.parseBool(options.allowVnetAccess);
      }

      if(options.allowForwardedTraffic) {
        parameters.allowForwardedTraffic = utils.parseBool(options.allowForwardedTraffic);
      }

      if(options.allowGatewayTransit) {
        parameters.allowGatewayTransit = utils.parseBool(options.allowGatewayTransit);
      }

      if(options.useRemoteGateways) {
        parameters.useRemoteGateways = utils.parseBool(options.useRemoteGateways);
      }

      if(!parameters.remoteVirtualNetwork) {
        parameters.remoteVirtualNetwork = {};
      }
      if(options.remoteVnetId) {
        if(options.remoteVnetName) {
          cli.output.warn($('--remote-vnet-name parameter will be ignored because --remote-vnet-id and --remote-vnet-name are mutually exclusive'));
        }
        parameters.remoteVirtualNetwork.id = options.remoteVnetId;
      } else if(options.remoteVnetName) {
        var idContainerremoteVirtualNetwork = networkManagementClient.virtualNetworks.get(resourceGroup, options.remoteVnetName, _);
        if (!idContainerremoteVirtualNetwork) {
          throw new Error(util.format($('A virtual network with name "%s" not found in the resource group "%s"'), options.remoteVnetName, resourceGroup));
        }
        parameters.remoteVirtualNetwork.id = idContainerremoteVirtualNetwork.id;
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Updating virtual network peering "%s"'), name));
      try {
        virtualNetworkPeering = networkManagementClient.virtualNetworkPeerings.createOrUpdate(resourceGroup, vnetName, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(virtualNetworkPeering, generatorUtils.traverse);
    });

  virtualNetworkPeerings.command('delete [resource-group] [vnet-name] [name]')
    .description($('Delete a virtual network peering'))
    .usage('[options] <resource-group> <vnet-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-e, --vnet-name <vnet-name>', $('the vnet name'))
    .option('-n, --name <name>', $('the name of the virtual network peering'))
    .option('-q, --quiet', $('quiet mode, do not ask for delete confirmation'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, vnetName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      vnetName = cli.interaction.promptIfNotGiven($('vnet name : '), vnetName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var virtualNetworkPeering;
      var progress = cli.interaction.progress(util.format($('Looking up the virtual network peering "%s"'), name));
      try {
        virtualNetworkPeering = networkManagementClient.virtualNetworkPeerings.get(resourceGroup, vnetName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          virtualNetworkPeering = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!virtualNetworkPeering) {
        throw new Error(util.format($('virtual network peering with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      if (!options.quiet && !cli.interaction.confirm(util.format($('Delete virtual network peering "%s"? [y/n] '), name), _)) {
        cli.output.info(util.format($('virtual network peering "%s" was not deleted and still exists in the resource group "%s"'), name, resourceGroup));
        return;
      }

      progress = cli.interaction.progress(util.format($('Deleting virtual network peering "%s"'), name));
      try {
        virtualNetworkPeering = networkManagementClient.virtualNetworkPeerings.deleteMethod(resourceGroup, vnetName, name, _);
        cli.output.info(util.format($('virtual network peering "%s" was successfully deleted from resource group "%s"'), name, resourceGroup));
      } finally {
        progress.end();
      }
    });

  virtualNetworkPeerings.command('show [resource-group] [vnet-name] [name]')
    .description($('Show a virtual network peering'))
    .usage('[options] <resource-group> <vnet-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-e, --vnet-name <vnet-name>', $('the vnet name'))
    .option('-n, --name <name>', $('the name of the virtual network peering'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, vnetName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      vnetName = cli.interaction.promptIfNotGiven($('vnet name : '), vnetName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var virtualNetworkPeering;
      var progress = cli.interaction.progress(util.format($('Looking up the virtual network peering "%s"'), name));
      try {
        virtualNetworkPeering = networkManagementClient.virtualNetworkPeerings.get(resourceGroup, vnetName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          virtualNetworkPeering = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!virtualNetworkPeering) {
        cli.output.warn(util.format($('virtual network peering with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      cli.interaction.formatOutput(virtualNetworkPeering, generatorUtils.traverse);
    });

  virtualNetworkPeerings.command('list [resource-group] [vnet-name]')
    .description($('List virtual network peerings'))
    .usage('[options] <resource-group> <vnet-name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-e, --vnet-name <vnet-name>', $('the vnet name'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, vnetName, options, _) {
      options.resourceGroup = resourceGroup;
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var virtualNetworkPeering = null;
      var progress;
      try {
        if(typeof networkManagementClient.virtualNetworkPeerings.listAll != 'function') {
          resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
          vnetName = cli.interaction.promptIfNotGiven($('virtual network : '), vnetName, _);
          progress = cli.interaction.progress($('Getting the virtual network peerings'));
          virtualNetworkPeering = networkManagementClient.virtualNetworkPeerings.list(resourceGroup, vnetName,  _);
        } else {
          if(options.resourceGroup) {
            vnetName = cli.interaction.promptIfNotGiven($('virtual network : '), vnetName, _);
            progress = cli.interaction.progress($('Getting the virtual network peerings'));
            virtualNetworkPeering = networkManagementClient.virtualNetworkPeerings.list(resourceGroup, vnetName,  _);
          } else {
            vnetName = cli.interaction.promptIfNotGiven($('virtual network : '), vnetName, _);
            progress = cli.interaction.progress($('Getting the virtual network peerings'));
            virtualNetworkPeering = networkManagementClient.virtualNetworkPeerings.listAll(vnetName, _);
          }
        }
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(virtualNetworkPeering, function(virtualNetworkPeering) {
        if (!virtualNetworkPeering || virtualNetworkPeering.length === 0) {
          cli.output.warn($('No virtual network peerings found'));
        } else {
          cli.output.table(virtualNetworkPeering, function (row, item) {
            generatorUtils.showTableRow(row, item);
          });
        }
      });
    });
};
